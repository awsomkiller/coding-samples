version: "3.8"
services:
  backend:
    # image: docker-registry.setera.com/my-backend
    container_name: backend
    build:
      context: ../../my-setera-BACKEND
    ports:
      - "8000:8000"
    environment:
      DB_HOST: db
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/0"
    depends_on:
      - db
      - elasticsearch
    networks:
      setera-nw:
      # setera-static-nw:
    volumes:
      - ../../my-setera-BACKEND:/my_backend
    env_file:
      - ./.env
    command: sh -c "ls && python my_backend/manage.py makemigrations  && python my_backend/manage.py migrate && python my_backend/manage.py runserver 0.0.0.0:8000"
    
    # command: sh -c "ls && python my_backend/manage.py makemigrations  && python my_backend/manage.py migrate && python my_backend/manage.py loaddata group.json  &&  python my_backend/manage.py loaddata new-customer.json && python my_backend/manage.py loaddata role.json && python my_backend/manage.py runserver 0.0.0.0:8000"
    
    # command: sh -c "ls && python my_backend/manage.py makemigrations  && python my_backend/manage.py migrate && python my_backend/manage.py loaddata group.json  && python my_backend/manage.py loaddata new-customer.json  && python my_backend/manage.py loaddata role.json  && python my_backend/manage.py runserver 0.0.0.0:8000"
  
